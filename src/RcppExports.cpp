// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// TEST
std::vector<double> TEST(double lb, double ub, int n);
RcppExport SEXP _DDModeling_TEST(SEXP lbSEXP, SEXP ubSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(TEST(lb, ub, n));
    return rcpp_result_gen;
END_RCPP
}
// TEST2
std::vector<double> TEST2(double mu, double s, int n);
RcppExport SEXP _DDModeling_TEST2(SEXP muSEXP, SEXP sSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(TEST2(mu, s, n));
    return rcpp_result_gen;
END_RCPP
}
// Generate_Modelprediction_rnd
Rcpp::S4 Generate_Modelprediction_rnd(Rcpp::S4 DDModel_, long trials_);
RcppExport SEXP _DDModeling_Generate_Modelprediction_rnd(SEXP DDModel_SEXP, SEXP trials_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDModel_(DDModel_SEXP);
    Rcpp::traits::input_parameter< long >::type trials_(trials_SEXP);
    rcpp_result_gen = Rcpp::wrap(Generate_Modelprediction_rnd(DDModel_, trials_));
    return rcpp_result_gen;
END_RCPP
}
// Generate_Modelprediction_par
Rcpp::S4 Generate_Modelprediction_par(Rcpp::S4 DDModel_, long trials_, std::vector<double> param_);
RcppExport SEXP _DDModeling_Generate_Modelprediction_par(SEXP DDModel_SEXP, SEXP trials_SEXP, SEXP param_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDModel_(DDModel_SEXP);
    Rcpp::traits::input_parameter< long >::type trials_(trials_SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type param_(param_SEXP);
    rcpp_result_gen = Rcpp::wrap(Generate_Modelprediction_par(DDModel_, trials_, param_));
    return rcpp_result_gen;
END_RCPP
}
// Fit_observed_data_rnd
Rcpp::S4 Fit_observed_data_rnd(Rcpp::List calc_cluster);
RcppExport SEXP _DDModeling_Fit_observed_data_rnd(SEXP calc_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type calc_cluster(calc_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Fit_observed_data_rnd(calc_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Fit_observed_data_grid
Rcpp::S4 Fit_observed_data_grid(Rcpp::List calc_cluster);
RcppExport SEXP _DDModeling_Fit_observed_data_grid(SEXP calc_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type calc_cluster(calc_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Fit_observed_data_grid(calc_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Fit_observed_data_DL
Rcpp::S4 Fit_observed_data_DL(Rcpp::List calc_cluster);
RcppExport SEXP _DDModeling_Fit_observed_data_DL(SEXP calc_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type calc_cluster(calc_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Fit_observed_data_DL(calc_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Calculate_Parameter_Combinations
void Calculate_Parameter_Combinations(Rcpp::S4 DDModel_, std::string wd, std::string name, std::vector<int> steps, int nSplit);
RcppExport SEXP _DDModeling_Calculate_Parameter_Combinations(SEXP DDModel_SEXP, SEXP wdSEXP, SEXP nameSEXP, SEXP stepsSEXP, SEXP nSplitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDModel_(DDModel_SEXP);
    Rcpp::traits::input_parameter< std::string >::type wd(wdSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< int >::type nSplit(nSplitSEXP);
    Calculate_Parameter_Combinations(DDModel_, wd, name, steps, nSplit);
    return R_NilValue;
END_RCPP
}
// Grid_calc
void Grid_calc(Rcpp::List calc_cluster);
RcppExport SEXP _DDModeling_Grid_calc(SEXP calc_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type calc_cluster(calc_clusterSEXP);
    Grid_calc(calc_cluster);
    return R_NilValue;
END_RCPP
}
// GRID_to_DDRep
Rcpp::List GRID_to_DDRep(Rcpp::List calc_cluster);
RcppExport SEXP _DDModeling_GRID_to_DDRep(SEXP calc_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type calc_cluster(calc_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(GRID_to_DDRep(calc_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Generate_DDRep
Rcpp::S4 Generate_DDRep(Rcpp::S4 DDModel_, Rcpp::List RAW_);
RcppExport SEXP _DDModeling_Generate_DDRep(SEXP DDModel_SEXP, SEXP RAW_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDModel_(DDModel_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type RAW_(RAW_SEXP);
    rcpp_result_gen = Rcpp::wrap(Generate_DDRep(DDModel_, RAW_));
    return rcpp_result_gen;
END_RCPP
}
// Reshape_DDRep
Rcpp::S4 Reshape_DDRep(Rcpp::S4 DDModel_, Rcpp::S4 DDRep_);
RcppExport SEXP _DDModeling_Reshape_DDRep(SEXP DDModel_SEXP, SEXP DDRep_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDModel_(DDModel_SEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type DDRep_(DDRep_SEXP);
    rcpp_result_gen = Rcpp::wrap(Reshape_DDRep(DDModel_, DDRep_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DDModeling_TEST", (DL_FUNC) &_DDModeling_TEST, 3},
    {"_DDModeling_TEST2", (DL_FUNC) &_DDModeling_TEST2, 3},
    {"_DDModeling_Generate_Modelprediction_rnd", (DL_FUNC) &_DDModeling_Generate_Modelprediction_rnd, 2},
    {"_DDModeling_Generate_Modelprediction_par", (DL_FUNC) &_DDModeling_Generate_Modelprediction_par, 3},
    {"_DDModeling_Fit_observed_data_rnd", (DL_FUNC) &_DDModeling_Fit_observed_data_rnd, 1},
    {"_DDModeling_Fit_observed_data_grid", (DL_FUNC) &_DDModeling_Fit_observed_data_grid, 1},
    {"_DDModeling_Fit_observed_data_DL", (DL_FUNC) &_DDModeling_Fit_observed_data_DL, 1},
    {"_DDModeling_Calculate_Parameter_Combinations", (DL_FUNC) &_DDModeling_Calculate_Parameter_Combinations, 5},
    {"_DDModeling_Grid_calc", (DL_FUNC) &_DDModeling_Grid_calc, 1},
    {"_DDModeling_GRID_to_DDRep", (DL_FUNC) &_DDModeling_GRID_to_DDRep, 1},
    {"_DDModeling_Generate_DDRep", (DL_FUNC) &_DDModeling_Generate_DDRep, 2},
    {"_DDModeling_Reshape_DDRep", (DL_FUNC) &_DDModeling_Reshape_DDRep, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DDModeling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
