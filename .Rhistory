pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
warnings()
pkgdown::build_site()
knitr::knit(input="README.rmd", output = "README.md")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
knitr::knit(input="README.rmd", output = "README.md")
pkgdown::build_site()
pkgdown::build_site()
knitr::knit(input="README.rmd", output = "README.md")
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
Sim_1 <- Sim_DDModel(model = DSTP_M1,trials = 10000)
FLANKER_DATA
TEST <- list()
for (i in 1:length(FLANKER_DATA))
{
RAW_data[[i]] <- DDRep(DSTP_M!,FLANKER_DATA[[i]])
}
for (i in 1:length(FLANKER_DATA))
{
RAW_data[[i]] <- DDRep(DSTP_M1,FLANKER_DATA[[i]])
}
TEST <- list()
for (i in 1:length(FLANKER_DATA))
{
TEST[[i]] <- DDRep(DSTP_M1,FLANKER_DATA[[i]])
}
TEST[[1]]
TEST <- FLANKER_DATA
lapply(TEST,FUN = function(X){DDRep(DSTP_M1,X)})
View(TEST)
TEST <- lapply(TEST,FUN = function(X){DDRep(DSTP_M1,X)})
View(TEST)
library(DDModeling)
library(devtools)
document()
M1 <- DDModel(model="DSTP",task = "flanker",CDF_perc = c(0.1,0.3,0.5,0.7,0.9),CAF_perc = c(0.0,0.2,0.4,0.6,0.8,1.0))
R1 <- Sim_DDModel(M1,10000)
Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
document()
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
R1 <- Sim_DDModel(M1,10000)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
document()
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
M1 <- DDModel(model="DSTP",task = "flanker",CDF_perc = c(0.1,0.3,0.5,0.7,0.9),CAF_perc = c(0.0,0.2,0.4,0.6,0.8,1.0))
R1 <- Sim_DDModel(M1,10000)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
library(DDModeling)
document()
library(devtools)
document()
M1 <- DDModel(model="DSTP",task = "flanker",CDF_perc = c(0.1,0.3,0.5,0.7,0.9),CAF_perc = c(0.0,0.2,0.4,0.6,0.8,1.0))
R1 <- Sim_DDModel(M1,10000)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
library(DDModeling)
M1 <- DDModel(model="DSTP",task = "flanker",CDF_perc = c(0.1,0.3,0.5,0.7,0.9),CAF_perc = c(0.0,0.2,0.4,0.6,0.8,1.0))
R1 <- Sim_DDModel(M1,10000)
G1 <- Get_Grid(M1,getwd(),"TESTGRID4")
F1 <- Fit_DDModel(M1,R1,G1,s_sampling = FALSE,trials = 500)
F1@FIT
F1
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(DDModeling)
devtools::build()
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_site()
#usethis::use_readme_md()
#usethis::use_readme_rmd()
#usethis::use_news_md()
#usethis::use_vignette("DDModeling")
#usethis::use_github_links()
usethis::use_pkgdown()
#usethis::use_readme_md()
#usethis::use_readme_rmd()
#usethis::use_news_md()
#usethis::use_vignette("DDModeling")
#usethis::use_github_links()
usethis::use_pkgdown()
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
load(file ="C:/Users/thoma/Documents/Uni/Psychologie/Software/DATA/SS_Fit_S_open_new_grid")
Fix_RC <- do.call(rbind,lapply(Fit_fix,function(x){x@FIT@FIT_P}))
Fix_RC <- cbind(Fix_RC,Fit=unlist(lapply(Fit_fix,function(x){x@FIT@FIT_V})))
Fix_RC <- as.data.frame(Fix_RC)
Fix_RC <- apply(Fix_RC,2,function(x){unlist(x)})
Fix_RC <- as.data.frame(Fix_RC)
View(Fix_RC)
library(rjson)
VP <- list.files(path ="C:/Users/thoma/Desktop/Daten_Druey/Ohne_Training",full.names = TRUE)
RAW <- list()
for (i in 1:length(VP))
{
blocks <- list.files(path = VP[i],full.names = TRUE,pattern = "block")
for (j in 1:length(blocks))
{
if (j == 1)
{
RAW[[i]] <- as.data.frame(fromJSON(file = blocks[j]))[,c("vp","con","RT","correct","task","pt")]
}
else
{
RAW[[i]] <- rbind(RAW[[i]],as.data.frame(fromJSON(file = blocks[j]))[,c("vp","con","RT","correct","task","pt")])
}
}
names(RAW[[i]]) <- c("VP","cond","time","resp","task","pts")
RAW[[i]]$cond <- factor(RAW[[i]]$cond,levels = c("1","0"),labels = c("Cong","Incong"))
RAW[[i]]$task <- factor(RAW[[i]]$task,levels = c("1","0"),labels = c("win","loss"))
}
rm(i,j,VP,blocks)
library(data.table)
RAW <- do.call(rbind,RAW)
RAW <- as.data.table(RAW)
RAW[,VP := as.factor(VP)]
Data <- RAW_data[,.(ptsum=sum(pts)),by=c("VP","task")]
Data <- RAW[,.(ptsum=sum(pts)),by=c("VP","task")]
load(file ="C:/Users/thoma/Documents/Uni/Psychologie/Software/DATA/SS_Fit_S_open_new_grid")
SS_RC <- do.call(rbind,lapply(Fit_fix,function(x){x@FIT@FIT_P}))
SS_RC <- cbind(SS_RC,Fit=unlist(lapply(Fit_fix,function(x){x@FIT@FIT_V})))
SS_RC <- as.data.frame(SS_RC)
SS_RC <- apply(SS_RC,2,function(x){unlist(x)})
SS_RC <- as.data.frame(SS_RC)
SS_RC <- as.data.table(SS_RC)
Data <- cbind(Data,SS_RC)
View(Data)
Data_cut <- Data[Fit < 0.1,]
View(Data)
table(Data)
table(Data$task)
table(Data_cut$task)
library(ggplot2)
Data
p_data <- melt(data,id.vars = c("VP,task"),measure.vars = c("ptsum"),variable.name ="parameter",value.name="ptsum")
View(p_data)
p_data <- reshape2::melt(data,id.vars = c("VP,task"),measure.vars = c("ptsum"),variable.name ="parameter",value.name="ptsum")
p_data <- data.table::melt(data,id.vars = c("VP,task"),measure.vars = c("ptsum"),variable.name ="parameter",value.name="ptsum")
p_data <- data.table::melt(data,id.vars = c("VP","task"),measure.vars = c("ptsum"),variable.name ="parameter",value.name="ptsum")
Data
p_data <- data.table::melt(data,id.vars = c("VP","task"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="ptsum")
p_data <- data.table::melt(Data,id.vars = c("VP","task"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="ptsum")
View(p_data)
p_data <- data.table::melt(Data,id.vars = c("VP","task","Fit"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="ptsum")
View(p_data)
p_data <- melt(Data,id.vars = c("VP","task","Fit"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="ptsum")
p_data <- melt(Data,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
View(p_data)
p_data
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task)) + geom_point() + geom_line() + facet_grid(.~parameter)
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task)) + geom_point() + geom_line() + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))  + geom_line() + facet_grid(.~parameter,scales = "free_x")
p_data <- melt(Data_cut,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))  + geom_line() + facet_grid(.~parameter,scales = "free_x")
p_data$Fit <- scales::rescale(x = p_data$Fit,to = c(1,6))
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_point() + facet_grid(.~parameter,scales = "free_x")
p_data <- melt(Data_cut,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
p_data$Fit <- scales::rescale(x = p_data$Fit,to = c(1,10))
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_point() + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "glm") + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "gam") + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "smooth") + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "loss") + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "loess") + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "lm") + facet_grid(.~parameter,scales = "free_x")
p_data
lm(data = p_data[parameter=="a" && task == "loss",],formula = ptsum ~ pvalue)
p_data[parameter=="a" && task == "loss",]
p_data[parameter=="a",]
p_data[parameter=="a" && task == "loss",]
p_data[parameter=="a" & task == "loss",]
lm(data = p_data[parameter=="a" & task == "loss",],formula = ptsum ~ pvalue)
summary(lm(data = p_data[parameter=="a" & task == "loss",],formula = ptsum ~ pvalue))
summary(lm(data = p_data[task == "loss",],formula = ptsum ~ pvalue + parameter))
Data_cut
summary(lm(data = Data_cut,formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data,formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut,formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut[task = "win"],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut[task = "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
Data_cut
summary(lm(data = Data_cut[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut,formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS + task))
summary(lm(data = Data_cut[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
summary(lm(data = Data_cut[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS))
LM_loss <- lm(data = Data_cut[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data_cut[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data_cut[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
car::vif(LM_win)
car::vif(LM_loss)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
car::vif(LM_loss)
car::vif(LM_win)
car::durbinWatsonTest(LM_win)
car::durbinWatsonTest(LM_loss)
plot(LM_win)
plot(LM_win)
plot(LM_win)
cor(Data[task=="win",])
cor(Data[task=="win",["Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"]])
cor(Data[task=="win",c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS")]
cor(Data[task=="win",c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS")])
p_data <- melt(Data,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
p_data$Fit <- scales::rescale(x = p_data$Fit,to = c(1,10))
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "lm",) + facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))  + geom_smooth(method = "lm") +geom_point()+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))   +geom_point()+ geom_smooth(method = "lm")+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task,size=Fit))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = TRUE)+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x")
lm(data = Data[task=="win",],formula = ptsum ~ a)
lm(data = Data[task=="loss",],formula = ptsum ~ a)
lm(data = Data[task=="loss",],formula = ptsum ~ mu_SS)
lm(data = Data[task=="win",],formula = ptsum ~ mu_SS)
lm(data = Data,formula = ptsum ~ mu_SS + task)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
lm(data = Data[task=="win",],formula = ptsum ~ mu_SS)
summary(lm(data = Data[task=="win",],formula = ptsum ~ mu_SS))
summary(lm(data = Data[task=="loss",],formula = ptsum ~ mu_SS))
summary(lm(data = Data[task=="loss",],formula = ptsum ~ c))
install.packages("lm.beta")
lm.beta::lm.beta(LM_win)
Data_b <- Data
Data_b <- Data
Data$ptsum <- scale(Data$ptsum,center = TRUE,scale = TRUE)
Data$Ter <- scale(Data$Ter,center = TRUE,scale = TRUE)
Data$a <- scale(Data$a,center = TRUE,scale = TRUE)
Data$c <- scale(Data$c,center = TRUE,scale = TRUE)
Data$mu_t <- scale(Data$mu_t,center = TRUE,scale = TRUE)
Data$mu_f <- scale(Data$mu_f,center = TRUE,scale = TRUE)
Data$mu_RS2 <- scale(Data$mu_RS2,center = TRUE,scale = TRUE)
Data$mu_SS <- scale(Data$mu_SS,center = TRUE,scale = TRUE)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
#Data_b <- Data
Data <- Data_b
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
Data$ptsum <- scale(Data$ptsum,center = TRUE,scale = TRUE)
Data$Ter <- scale(Data$Ter,center = TRUE,scale = TRUE)
Data$a <- scale(Data$a,center = TRUE,scale = TRUE)
Data$c <- scale(Data$c,center = TRUE,scale = TRUE)
Data$mu_t <- scale(Data$mu_t,center = TRUE,scale = TRUE)
Data$mu_f <- scale(Data$mu_f,center = TRUE,scale = TRUE)
Data$mu_RS2 <- scale(Data$mu_RS2,center = TRUE,scale = TRUE)
Data$mu_SS <- scale(Data$mu_SS,center = TRUE,scale = TRUE)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.5 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[Fit < 0.5 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
lm.beta::lm.beta(LM_win)
car::vif(LM_win)
car::vif(LM_loss)
car::durbinWatsonTest(LM_win)
car::durbinWatsonTest(LM_loss)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
car::vif(LM_win)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
car::vif(LM_win)
car::vif(LM_loss)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ a + c +  mu_f + mu_RS2 + mu_SS)
summary(LM_win)
car::vif(LM_win)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~ a + c + mu_t +  mu_f + mu_RS2 + mu_SS)
summary(LM_win)
car::vif(LM_win)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c + mu_t +  mu_f + mu_RS2 + mu_SS)
summary(LM_win)
car::vif(LM_win)
car::vif(LM_loss)
Data
#Data_b <- Data
Data <- Data_b
Data
write.csv2(Data,file = "Druey_DSTP_Fit")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x")
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
p_data <- melt(Data,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
p_data$Fit <- scales::rescale(x = p_data$Fit,to = c(1,10))
ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1 <- ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
ggsave(P1,filename = "Druey_DSTP_fit_all_subj.tif")
ggsave(P1,filename = "Druey_DSTP_fit_all_subj.tiff")
ggsave(P1,filename = "Druey_DSTP_fit_all_subj.tiff",dpi = 300)
ggsave(P1,filename = "Druey_DSTP_fit_all_subj.pdf",dpi = 300)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c + mu_t +  mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
Data$ptsum <- scale(Data$ptsum,center = TRUE,scale = TRUE)
Data$Ter <- scale(Data$Ter,center = TRUE,scale = TRUE)
Data$a <- scale(Data$a,center = TRUE,scale = TRUE)
Data$c <- scale(Data$c,center = TRUE,scale = TRUE)
Data$mu_t <- scale(Data$mu_t,center = TRUE,scale = TRUE)
Data$mu_f <- scale(Data$mu_f,center = TRUE,scale = TRUE)
Data$mu_RS2 <- scale(Data$mu_RS2,center = TRUE,scale = TRUE)
Data$mu_SS <- scale(Data$mu_SS,center = TRUE,scale = TRUE)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c + mu_t +  mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
summary(LM_loss)
car::vif(LM_win)
car::vif(LM_loss)
car::durbinWatsonTest(LM_win)
car::durbinWatsonTest(LM_loss)
summary(LM_win)
confint(LM_win)
t <- summary(LM_win)
t$coefficients
cbind(t$coefficients,confint(LM_win))
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c + mu_t +  mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_win)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
summary(LM_win)
confint(LM_win)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
summary(LM_loss)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_loss)
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_win.csv")
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_win)
summary(LM_loss)
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_win_all_subj.csv")
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_loss_all_subj.csv")
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_f + mu_RS2 + mu_SS)
#LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
#LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 )
#LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
#LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_win)
summary(LM_loss)
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 + mu_SS)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 )
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 + mu_SS)
#LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
#LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_win)
summary(LM_loss)
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_win_cut_subj.csv")
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_loss_cut_subj.csv")
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 )
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 + mu_SS)
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_win_cut_subj.csv")
write.csv2(cbind(summary(LM_loss)$coefficients,confint(LM_loss)),file = "LM_loss_cut_subj.csv")
#LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 )
#LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 + mu_SS)
LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
write.csv2(cbind(summary(LM_win)$coefficients,confint(LM_win)),file = "LM_win_all_subj.csv")
write.csv2(cbind(summary(LM_loss)$coefficients,confint(LM_loss)),file = "LM_loss_all_subj.csv")
summary(LM_win)
summary(LM_loss)
LM_win <- lm(data = Data[Fit < 0.1 & task == "win",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 )
LM_loss <- lm(data = Data[Fit < 0.1 & task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_RS2 + mu_SS)
#LM_win <- lm(data = Data[task == "win",],formula =  ptsum ~Ter+ a + c)
#LM_loss <- lm(data = Data[task == "loss",],formula =  ptsum ~ Ter + a + c + mu_t + mu_SS)
summary(LM_win)
summary(LM_loss)
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
p_data
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
p_data[Fit<0.1,]
p_data
p_data$Fit<0.1
p_data <- melt(Data,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
p_data$Fit<0.1
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
P1 <- ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
#Data_b <- Data
Data <- Data_b
p_data <- melt(Data,id.vars = c("VP","task","Fit","ptsum"),measure.vars = c("Ter","a","c","mu_t","mu_f","mu_RS2","mu_SS"),variable.name ="parameter",value.name="pvalue")
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
P1 <- ggplot(data = p_data,aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
ggsave(P1,filename = "Druey_DSTP_fit_cut_subj.pdf",dpi = 300)
P1 <- ggplot(data = p_data[Fit<0.1,],aes(x=pvalue,y=ptsum,color=task))   +geom_point()+ geom_smooth(method = "lm",se = FALSE)+ facet_grid(.~parameter,scales = "free_x") +
labs(x="Estimated parameter",y = "Sum of points") + theme(legend.position = "bottom")
P1
ggsave(P1,filename = "Druey_DSTP_fit_cut_subj.pdf",dpi = 300)
View(Data)
write.csv2(Data,file = "Druey_data.csv")
